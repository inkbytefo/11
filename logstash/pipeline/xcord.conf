input {
  tcp {
    port => 5000
    codec => json
    type => "tcp"
  }
  udp {
    port => 5000
    codec => json
    type => "udp"
  }
}

filter {
  if ![timestamp] {
    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
    }
  }

  if [type] == "tcp" or [type] == "udp" {
    mutate {
      add_field => {
        "environment" => "%{[environment]}"
        "service" => "%{[service]}"
      }
    }
  }

  # Log seviyesini standardize et
  mutate {
    gsub => [
      "level", "error", "ERROR",
      "level", "warn", "WARN",
      "level", "info", "INFO",
      "level", "debug", "DEBUG"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "xcord-logs-%{+YYYY.MM.dd}"
    template_name => "xcord-logs"
    template_overwrite => true
    template => {
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" },
          "message" => { "type" => "text" },
          "level" => { "type" => "keyword" },
          "service" => { "type" => "keyword" },
          "environment" => { "type" => "keyword" },
          "type" => { "type" => "keyword" },
          "host" => { "type" => "keyword" },
          "path" => { "type" => "keyword" },
          "method" => { "type" => "keyword" },
          "status" => { "type" => "integer" },
          "responseTime" => { "type" => "float" },
          "userId" => { "type" => "keyword" },
          "error" => {
            "properties" => {
              "message" => { "type" => "text" },
              "stack" => { "type" => "text" },
              "code" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }
  
  # Debug amaçlı stdout çıktısı (development ortamında)
  stdout {
    codec => rubydebug
  }
}